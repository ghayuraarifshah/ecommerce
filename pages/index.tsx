import type { NextPage } from "next";
import Head from "next/head";
import mongoose from "mongoose";
import itemModel from "../models/items";
import type item from "../interface/item";
import Item from "../components/Item";
import { useState } from "react";
import { faArrowRight, faArrowLeft } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import Header from "../components/Header";
import user from "../interface/user";
import userModel from "../models/user";
import order from "../interface/order";
import secret from "../secret";
import cart from "../interface/cart";
import cartModel from "../models/cart";
interface Props {
  items: item[];
  user: user;
  cart: cart;
}
const Home: NextPage<Props> = ({ items, user, cart }) => {
  const arrOfItems = [];
  for (let i = 0; i !== Math.ceil(items.length / 8); i++) {
    arrOfItems.push(items.slice(i * 8, (i + 1) * 8));
  }
  function changeIndex(dir: "add" | "sub") {
    if (dir == "add") {
      if (index === arrOfItems.length - 1) return;
      setIndex((i) => i + 1);
    }
    if (dir == "sub") {
      if (index === 0) return;
      setIndex((i) => i - 1);
    }
  }
  const [index, setIndex] = useState(0);
  const [_cart, setCart] = useState<cart>(cart);
  async function placeOrder(order: order) {
    fetch("/api/place-order", {
      method: "POST",
      body: JSON.stringify({ userId: user._id, order: order }),
    });
  }
  async function addToCart(item: item) {
    const itemPresent = _cart.items.filter((el) => {
      return el.item._id == item._id;
    })[0];
    if (itemPresent) {
      const index = _cart.items.indexOf(itemPresent);
      _cart.items[index].quantity += 1;
      _cart.quantity += 1;
      const totalArr = _cart.items.map((el) => {
        return Math.floor(el.item.price) * el.quantity;
      });
      const total = totalArr.reduce(
        (previousValue, currentValue) => previousValue + currentValue,
        0
      );
      _cart.total = total;
      try {
        const res = await fetch("/api/change-cart", {
          method: "POST",
          body: JSON.stringify(_cart),
        });
        const newCart = await res.json();
        setCart(newCart);
      } catch (error) {
        alert("Something went wrong");
      }
      return;
    }
    _cart.items.push({
      item,
      quantity: 1,
    });
    _cart.quantity += 1;
    _cart.total +=
      _cart.items[index].quantity * Math.floor(_cart.items[index].item.price);
    const res = await fetch("/api/change-cart", {
      method: "POST",
      body: JSON.stringify(_cart),
    });
    const newCart = await res.json();
    setCart(newCart);
    return;
  }
  return (
    <>
      <Header user={user} cart={_cart} />
      <main>
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app" />
        </Head>
        <main className="flex flex-col bg-white">
          <div className="flex flex-wrap">
            {arrOfItems[index].map((el) => (
              <Item
                user={user}
                item={el}
                key={el._id}
                placeOrder={placeOrder}
                addToCart={addToCart}
              />
            ))}
          </div>
          <div className="flex mx-auto my-5 items-center ">
            <button onClick={() => changeIndex("sub")}>
              <FontAwesomeIcon
                icon={faArrowLeft}
                className="text-2xl mx-5 text-gray-600"
              />
            </button>
            {arrOfItems.map((el, i) => {
              return (
                <div
                  className={
                    "mx-3 px-5 py-3 rounded-full" +
                    (i === index ? " bg-purple-700 text-white" : "")
                  }
                >
                  {i + 1}
                </div>
              );
            })}
            <button onClick={() => changeIndex("add")}>
              <FontAwesomeIcon
                icon={faArrowRight}
                className="text-2xl mx-5 text-gray-600"
              />
            </button>
          </div>
        </main>
      </main>
    </>
  );
};

export async function getServerSideProps() {
  const conn = await mongoose.connect(secret.monogo);
  const items: item[] = await itemModel.find();
  const user: user[] = await userModel.find();
  const cart: cart | null = await cartModel
    .findOne<cart>({ owner: user[0]._id })
    .populate({
      path: "items",
      populate: {
        path: "item",
        model: "item",
      },
    });
  if (cart == null) {
    const cart = new cartModel<cart>({
      items: [],
      quantity: 0,
      total: 0,
      owner: user[0]._id,
    });
    await cart.save();
    conn.disconnect();
    return {
      props: {
        items: JSON.parse(JSON.stringify(items)),
        user: JSON.parse(JSON.stringify(user[0])),
        cart: JSON.parse(JSON.stringify(cart)),
      },
    };
  }
  conn.disconnect();
  return {
    props: {
      items: JSON.parse(JSON.stringify(items)),
      user: JSON.parse(JSON.stringify(user[0])),
      cart: JSON.parse(JSON.stringify(cart)),
    },
  };
}

export default Home;
