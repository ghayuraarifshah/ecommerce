import type { NextPage } from "next";
import Head from "next/head";
import mongoose from "mongoose";
import orderModel from "../../models/orders";
import type order from "../../interface/order";
import type { NextPageContext } from "next/";
import userModel from "../../models/user";
import type user from "../../interface/user";
import Header from "../../components/Header";
interface Props {
  orders: order[];
  user: user;
}
const Orders: NextPage<Props> = ({ orders, user }) => {
  return (
    <>
      <Head>
        <title>Ecommerce</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <Header user={user} />
      <main className="h-screen mt-15">
        {orders.length === 0 && <p>No orders</p>}
        {orders.map((el) => el.quantity)}
      </main>
    </>
  );
};

export async function getServerSideProps(context: NextPageContext) {
  const { req, query } = context;
  const { id } = query;
  const conn = await mongoose.connect(
    "mongodb://127.0.0.1:6000/ecommerse?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+1.4.2"
  );
  const orders: order[] = await orderModel.find<order>({ orderedBy: id });
  const user: user[] | null = await userModel.find<user>();
  return {
    props: { orders, user: JSON.parse(JSON.stringify(user[0])) },
  };
}

export default Orders;
