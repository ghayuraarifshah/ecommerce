import type { NextPage } from "next";
import Head from "next/head";
import mongoose from "mongoose";
import userModel from "../models/user";
import user from "../interface/user";
import cartModel from "../models/cart";
import type cart from "../interface/cart";
import { useContext, useEffect, useState, FormEvent } from "react";
import UserContext from "../providers/userProvider";
import CartContext from "../providers/cartProvider";
import Input from "../components/Input";
interface Props {
  user: user;
  cart: cart;
}
const User: NextPage<Props> = ({ user, cart }) => {
  const { setUser, changeUser } = useContext(UserContext);
  const { setCart } = useContext(CartContext);
  const [isValid, setIsValid] = useState(false);
  const [newUser, setNewUser] = useState<user>(user);
  useEffect(() => {
    if (!setUser || !setCart) return;
    setUser(user);
    setCart(cart);
  }, []);
  function onBlur(val: string, key: string) {
    let key2 = "";
    let key1 = "";
    if (key.indexOf(".") > 0) {
      const keys = key.split(".");
      key1 = keys[0];
      key2 = keys[1];
      setNewUser((oldUser) => {
        const _newUser: any = oldUser;
        _newUser[key1][key2] = val;
        return _newUser;
      });
    } else {
      setNewUser((oldUser) => {
        const _newUser: any = oldUser;
        _newUser[key] = val;
        return _newUser;
      });
    }
  }
  async function onSubmit(e: FormEvent<HTMLFormElement>) {
    e.preventDefault();
    if (isValid) {
      const newerUser = await changeUser(newUser);
      setNewUser(newerUser);
    }
  }
  return (
    <>
      <Head>
        <title>Ecommerce</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <main className="h-[90vh] flex lg:flex-row flex-col items-center justify-center xl:my-2 lg:my-24 my-[20vh]">
        <div className="flex-1 flex flex-col items-center">
          <img
            src={`https://avatars.dicebear.com/api/initials/${newUser.name}.svg`}
            alt=""
            className="w-1/3 rounded-full mb-5"
          />
          <p className="text-2xl">{newUser.name}</p>
          <p className="text-l text-gray-500">{newUser.email}</p>
        </div>
        <div className="flex-1 shadow-md rounded-md md:mx-10">
          <h1 className="my-5 text-3xl mx-5 ">Profile Settings</h1>
          <form
            className="w-full justify-center p-2 flex flex-col"
            onSubmit={onSubmit}
          >
            <div className="my-5 mx-3">
              <div className="flex w-full">
                <Input
                  className="w-full mr-2"
                  onBlur={(val) => onBlur(val, "name")}
                  placeholder="Name"
                  type="text"
                  initValue={newUser.name}
                  setIsValid={(bool) => setIsValid(bool)}
                />
                <Input
                  className="w-full mx-2"
                  onBlur={(val) => onBlur(val, "lastname")}
                  placeholder="Last name"
                  type="text"
                  setIsValid={(bool) => setIsValid(bool)}
                  initValue={newUser.lastName}
                />
              </div>
              <div className="flex w-full">
                <Input
                  className="w-full mr-2"
                  onBlur={(val) => onBlur(val, "email")}
                  placeholder="Email"
                  type="email"
                  setIsValid={(bool) => setIsValid(bool)}
                  initValue={newUser.email}
                />
                <Input
                  className="w-full mx-2"
                  onBlur={(val) => onBlur(val, "phoneNumber")}
                  placeholder="first name"
                  type="phone"
                  setIsValid={(bool) => setIsValid(bool)}
                  initValue={newUser.phoneNumber}
                />
              </div>
            </div>
            <div className="my-5 mx-3">
              <h1 className="text-xl">Billing Address</h1>
              <div className="flex w-full">
                <Input
                  className="w-full mr-2"
                  onBlur={(val) => onBlur(val, "billingAddress.addressLine1")}
                  placeholder="Address Line 1"
                  type="text"
                  setIsValid={(bool) => setIsValid(bool)}
                  initValue={newUser.billingAddress.addressLine1}
                />
                <Input
                  className="w-full mx-2"
                  setIsValid={(bool) => setIsValid(bool)}
                  onBlur={(val) => onBlur(val, "billingAddress.addressLine2")}
                  placeholder="Address Line 2"
                  type="text"
                  initValue={newUser.billingAddress.addressLine2}
                />
              </div>
              <div className="flex w-full">
                <Input
                  setIsValid={(bool) => setIsValid(bool)}
                  className="w-full mr-2"
                  onBlur={(val) => onBlur(val, "billingAddress.city")}
                  placeholder="City"
                  type="text"
                  initValue={newUser.billingAddress.city}
                />
                <Input
                  className="w-full mx-2"
                  onBlur={(val) => onBlur(val, "billingAddress.state")}
                  setIsValid={(bool) => setIsValid(bool)}
                  placeholder="State"
                  type="text"
                  initValue={newUser.billingAddress.state}
                />
              </div>
              <div className="flex w-full">
                <Input
                  onBlur={(val) => onBlur(val, "billingAddress.zipcode")}
                  className="w-full mr-2"
                  placeholder="Zip-Code"
                  type="zipcode"
                  initValue={String(newUser.billingAddress.zipCode)}
                  setIsValid={(bool) => setIsValid(bool)}
                />
              </div>
            </div>
            <div className="my-5 mx-3">
              <h1 className="text-xl">Shipping Address</h1>
              <div className="flex w-full">
                <Input
                  className="w-full mr-2"
                  onBlur={(val) => onBlur(val, "shippingAddress.addressLine1")}
                  placeholder="Address Line 1"
                  setIsValid={(bool) => setIsValid(bool)}
                  type="text"
                  initValue={newUser.shippingAddress.addressLine1}
                />
                <Input
                  className="w-full mx-2"
                  onBlur={(val) => onBlur(val, "shippingAddress.addressLine2")}
                  placeholder="Address Line 2"
                  type="text"
                  setIsValid={(bool) => setIsValid(bool)}
                  initValue={newUser.shippingAddress.addressLine2}
                />
              </div>
              <div className="flex w-full">
                <Input
                  className="w-full mr-2"
                  onBlur={(val) => onBlur(val, "shippingAddress.city")}
                  placeholder="City"
                  setIsValid={(bool) => setIsValid(bool)}
                  type="text"
                  initValue={newUser.shippingAddress.city}
                />
                <Input
                  className="w-full mx-2"
                  onBlur={(val) => onBlur(val, "shippingAddress.state")}
                  placeholder="State"
                  type="text"
                  initValue={newUser.shippingAddress.state}
                  setIsValid={(bool) => setIsValid(bool)}
                />
              </div>
              <div className="flex w-full">
                <Input
                  className="w-full mr-2"
                  onBlur={(val) => onBlur(val, "shippingAddress.zipcode")}
                  placeholder="Zip-Code"
                  type="zipcode"
                  setIsValid={(bool) => setIsValid(bool)}
                  initValue={String(newUser.shippingAddress.zipCode)}
                />
              </div>
            </div>
            <button className="mx-auto md:px-10 px-5 bg-green-500 text-white py-2 rounded-lg">
              Save Settings
            </button>
          </form>
        </div>
      </main>
    </>
  );
};

export async function getServerSideProps() {
  const conn = await mongoose.connect(
    "mongodb://127.0.0.1:6000/ecommerse?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+1.4.2"
  );
  const user = await userModel.findOne<user>();
  const cart: cart | null = await cartModel.findOne<cart>({ owner: user?._id });
  return {
    props: {
      user: JSON.parse(JSON.stringify(user)),
      cart: JSON.parse(JSON.stringify(cart)),
    },
  };
}

export default User;
