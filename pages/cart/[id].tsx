import type { NextPage } from "next";
import Head from "next/head";
import mongoose from "mongoose";
import cartModel from "../../models/cart";
import type cart from "../../interface/cart";
import type { NextPageContext } from "next/";
import userModel from "../../models/user";
import type user from "../../interface/user";
import { useContext, useEffect } from "react";
import CartItem from "../../components/CartItem";
import { useRouter } from "next/router";
import UserContext from "../../providers/userProvider";
import OrderContext from "../../providers/orderProvider";
import CartContext from "../../providers/cartProvider";
interface Props {
  user: user;
  _cart: cart;
}
const Cart: NextPage<Props> = ({ user, _cart }) => {
  const { setUser } = useContext(UserContext);
  const { setCart, cart, removeItemFromCart } = useContext(CartContext);
  const { placeOrderFromCart } = useContext(OrderContext);
  useEffect(() => {
    if (setUser && setCart) {
      setUser(user);
      setCart(_cart);
    }
  }, []);
  const router = useRouter();
  async function placeOrder() {
    if (!cart) return;
    await placeOrderFromCart(cart, user);
    router.push(`/orders/${user._id}`);
  }
  return (
    <>
      <Head>
        <title>Ecommerce</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <main className="h-screen mt-15">
        {cart?.items.map((el) => (
          <CartItem
            key={el.item._id}
            item={el.item}
            quantity={el.quantity}
            removeItem={removeItemFromCart}
          />
        ))}
        <div className="bg-gray-300 h-[1px] mx-5 mt-5" />
        <div className="mt-5 flex justify-between mx-5">
          <div className="text-xl font-bold">Total:</div>
          <div className="text-xl font-bold">${cart?.total}</div>
        </div>
        <div className="flex justify-end mt-5">
          <button
            className="bg-green-600 text-white rounded-md mx-5 px-4 py-1"
            onClick={placeOrder}
          >
            Place Order
          </button>
        </div>
      </main>
    </>
  );
};

export async function getServerSideProps(context: NextPageContext) {
  const { query } = context;
  const { id } = query;
  await mongoose.connect(
    "mongodb://127.0.0.1:6000/ecommerse?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+1.4.2"
  );
  const cart: cart | null = await cartModel
    .findOne<cart>({ owner: id })
    .populate({
      path: "items",
      populate: {
        path: "item",
        model: "item",
      },
    });
  const user: user[] | null = await userModel.find<user>();
  if (cart === null) {
    const cart = new cartModel<cart>({
      items: [],
      owner: user[0]._id,
      quantity: 0,
      total: 0,
    });
    return {
      props: {
        _cart: JSON.parse(JSON.stringify(cart)),
        user: JSON.parse(JSON.stringify(user[0])),
      },
    };
  }
  return {
    props: {
      _cart: JSON.parse(JSON.stringify(cart)),
      user: JSON.parse(JSON.stringify(user[0])),
    },
  };
}

export default Cart;
